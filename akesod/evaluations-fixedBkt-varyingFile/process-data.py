import numpy as np
# Parse the data
data = {
    '1MB': {
        "cmek": [211.068, 202.06, 216.162, 207.185, 218.618, 221.075, 211.968, 222.993, 233.631, 234.132],
        "cmek-hsm": [209.245, 198.444, 205.157, 206.528, 217.162, 216.765, 207.223, 215.204, 231.196, 225.99],
        "csek": [116.817, 116.726, 117.788, 114.179, 119.776, 115.026, 116.042, 115.275, 118.968, 120.541],
        "keywrap": [86.459, 85.055, 86.485, 85.213, 89.921, 87.69, 84.985, 86.108, 86.773, 88.733],
        "strawman": [214.667, 214.39, 218.957, 213.933, 226.509, 223.839, 221.525, 215.99, 221.821, 228.467],
        "akeso": [95.614, 116.718, 95.756, 94.182, 97.995, 98.743, 94.782, 95.921, 97.902, 99.553]
    },
    '2MB': {
        'cmek': [110.545, 111.099, 105.593, 107.711, 107.582, 108.799, 108.432, 108.666, 113.475, 112.009],
        'cmek-hsm': [107.456, 111.756, 108.154, 105.741, 107.017, 107.043, 108.582, 108.916, 114.821, 112.815],
        'csek': [56.978, 58.184, 56.528, 56.184, 57.902, 56.264, 57.544, 58.487, 58.240, 58.573],
        'keywrap': [41.589, 41.991, 42.276, 40.906, 41.564, 41.367, 42.171, 43.147, 44.819, 43.211],
        'strawman': [118.123, 119.632, 118.400, 117.135, 121.928, 119.678, 121.099, 122.791, 123.356, 122.064],
        'akeso': [46.334, 46.741, 46.715, 47.336, 47.789, 46.244, 46.466, 47.719, 49.862, 49.612]
    },
    '4MB': {
        'cmek': [66.161, 69.435, 65.872, 64.251, 65.874, 65.906, 68.350, 69.201, 68.753, 68.795],
        'cmek-hsm': [67.678, 70.824, 64.763, 64.651, 66.166, 67.170, 68.658, 68.123, 68.000, 68.542],
        'csek': [27.988, 30.003, 28.123, 29.012, 28.613, 28.741, 29.584, 29.089, 29.748, 30.019],
        'keywrap': [20.651, 22.822, 20.933, 21.321, 21.596, 21.220, 21.135, 21.422, 21.560, 21.636],
        'strawman': [73.166, 76.013, 72.019, 72.773, 73.042, 73.680, 74.223, 75.615, 75.399, 75.267],
        'akeso': [23.749, 24.767, 23.626, 23.840, 23.936, 29.947, 24.186, 24.161, 24.152, 24.429]
    },
    '16MB': {
        'cmek': [33.288, 34.173, 31.774, 31.899, 32.912, 33.137, 32.549, 32.949, 32.554, 33.775],
        'cmek-hsm': [37.685, 34.079, 32.314, 31.624, 33.141, 32.799, 33.061, 33.176, 32.908, 32.669],
        'csek': [7.211, 7.721, 7.357, 7.303, 7.392, 7.559, 7.289, 7.729, 7.304, 7.663],
        'keywrap': [5.361, 5.774, 5.419, 5.383, 5.510, 5.367, 5.398, 5.551, 5.516, 5.526],
        'strawman': [35.013, 35.753, 35.066, 34.790, 34.925, 34.815, 35.928, 36.349, 34.633, 37.591],
        'akeso': [6.977, 7.263, 7.088, 6.931, 7.155, 6.519, 6.893, 7.423, 7.309, 7.555]
    }
}

# Calculate means and standard errors
with open('combined.dat', 'w') as f:
    f.write("#Size\tcmek\tcmek_min\tcmek_max\tcmek-hsm\tcmek-hsm_min\tcmek-hsm_max\tcsek\tcsek_min\tcsek_max\tkeywrap\tkeywrap_min\tkeywrap_max\tstrawman\tstrawman_min\tstrawman_max\takeso\takeso_min\takeso_max\n")
    
    for size in data.keys():
        row = [size]
        for method in ['cmek', 'cmek-hsm', 'csek', 'keywrap', 'strawman', 'akeso']:
            values = np.array(data[size][method])
            mean = np.mean(values)
            std = np.std(values, ddof=1)
            stderr = std / np.sqrt(len(values))
            print("%s %s Mean: %.3f Std: %.3f" % (method, size, mean, std))
            
            # For error bars, we can use mean ± stderr or mean ± std
            # Using stderr for smaller error bars
            row.extend([f"{mean:.3f}", f"{mean-stderr:.3f}", f"{mean+stderr:.3f}"])
        
        f.write("\t".join(row) + "\n")